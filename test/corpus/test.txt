================================================================================
Simple declaration
================================================================================

let x = 42;

--------------------------------------------------------------------------------

(source_file
  (let_declaration 
    (identifier)
    (literal)))

================================================================================
Mutable declaration
================================================================================

let mut y = 10;

--------------------------------------------------------------------------------

(source_file 
  (let_declaration 
    (mutable_specifier)
    (identifier)
    (literal)))

================================================================================
Simple declaration (with type annotation)
================================================================================

let x: i32 = 42;

--------------------------------------------------------------------------------

(source_file 
  (let_declaration 
    (identifier)
    (type_expression)
    (literal)))

================================================================================
Function declaration 
================================================================================

fn my_function() {}

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameters)
    (block)))

================================================================================
Method call 
================================================================================

object.method();

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (method_call
      (identifier)
      (identifier))))

================================================================================
Macro invocation 
================================================================================

println!("Hello, World!");

--------------------------------------------------------------------------------
(source_file
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_arguments
        (literal)))))

================================================================================
Reference expression 
================================================================================

let a = &my_variable;

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (identifier)
    (reference_expression
      (identifier))))

================================================================================
Mutable reference expression 
================================================================================

let b = &mut my_variable;

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (identifier)
    (reference_expression
      (mutable_specifier)
      (identifier))))

================================================================================
Block with multiple statements 
================================================================================

{
  let c = 30;
  c;
}

--------------------------------------------------------------------------------

(source_file
  (block
    (let_declaration
      (identifier)
      (literal))
    (expression_statement
    (identifier))))

================================================================================
Function with parameters and return type
================================================================================

fn calculate(x: i32, y: i32) -> i32 {
  x + y
}

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)                 
    (parameters                  
      (parameter
        (identifier)             
        (type_expression))       
      (parameter
        (identifier)             
        (type_expression)))      
    (type_expression)            
    (block
      (standalone_expression
        (binary_expression
          (identifier)           
          (identifier))))))

================================================================================
Parse Tree Representation of a Rust Function with Reference Parameters
================================================================================

fn process_data(data: &i32, buffer: &mut i32) {
  *buffer = *data + 10;
}

--------------------------------------------------------------------------------

(source_file 
  (function_declaration
    (identifier)
    (parameters 
      (parameter 
        (identifier)
        (reference_type 
          (type_expression)))
      (parameter 
        (identifier)
        (reference_type 
          (mutable_specifier)
          (type_expression))))
    (block 
      (expression_statement
        (assignment_expression 
          (unary_expression
            (dereference_expression 
              (identifier)))
          (binary_expression 
            (unary_expression
              (dereference_expression
                (identifier)))
            (literal)))))))
