================================================================================
Simple declaration
================================================================================

let x = 42;

--------------------------------------------------------------------------------

(source_file
  (let_declaration 
    (identifier)
    (literal)))

================================================================================
Mutable declaration
================================================================================

let mut y = 10;

--------------------------------------------------------------------------------

(source_file 
  (let_declaration 
    (mutable_specifier)
    (identifier)
    (literal)))

================================================================================
Simple declaration (with type annotation)
================================================================================

let x: i32 = 42;

--------------------------------------------------------------------------------

(source_file 
  (let_declaration 
    (identifier)
    (type_expression)
    (literal)))

================================================================================
Function declaration 
================================================================================

fn my_function() {}

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameters)
    (block)))

================================================================================
Method call 
================================================================================

object.method();

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (method_call
      (identifier)
      (identifier))))

================================================================================
Macro invocation 
================================================================================

println!("Hello, World!");

--------------------------------------------------------------------------------
(source_file
  (expression_statement
    (macro_invocation
      (identifier)
      (macro_arguments
        (literal)))))

================================================================================
Reference expression 
================================================================================

let a = &my_variable;

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (identifier)
    (reference_expression
      (identifier))))

================================================================================
Mutable reference expression 
================================================================================

let b = &mut my_variable;

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (identifier)
    (reference_expression
      (mutable_specifier)
      (identifier))))

================================================================================
Block with multiple statements 
================================================================================

{
  let c = 30;
  c;
}

--------------------------------------------------------------------------------

(source_file
  (block
    (let_declaration
      (identifier)
      (literal))
    (expression_statement
    (identifier))))

================================================================================
Function with parameters and return type
================================================================================

fn calculate(x: i32, y: i32) -> i32 {
  x + y
}

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameters
      (identifier)
      (type_expression)
      (identifier)
      (type_expression))
    (type_expression)
    (block
      (binary_expression))))
